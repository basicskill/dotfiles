# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'w': 'session-save', 'q': 'quit', 'wq': 'quit --save'}

# Backend to use to display websites. qutebrowser supports two different
# web rendering engines / backends, QtWebKit and QtWebEngine. QtWebKit
# was discontinued by the Qt project with Qt 5.6, but picked up as a
# well maintained fork: https://github.com/annulen/webkit/wiki -
# qutebrowser only supports the fork. QtWebEngine is Qt's official
# successor to QtWebKit. It's slightly more resource hungry than
# QtWebKit and has a couple of missing features in qutebrowser, but is
# generally the preferred choice.
# Type: String
# Valid values:
#   - webengine: Use QtWebEngine (based on Chromium).
#   - webkit: Use QtWebKit (based on WebKit, similar to Safari).
c.backend = 'webengine'

# Time interval (in milliseconds) between auto-saves of
# config/cookies/etc.
# Type: Int
c.auto_save.interval = 15000

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Which cookies to accept.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
c.content.cookies.accept = 'all'

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Proxy to use. In addition to the listed values, you can use a
# `socks://...` or `http://...` URL.
# Type: Proxy
# Valid values:
#   - system: Use the system wide proxy.
#   - none: Don't use any proxy
c.content.proxy = 'system'

# List of user stylesheet filenames to use.
# Type: List of File, or File
c.content.user_stylesheets = []

# Where to show the downloaded files.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.downloads.position = 'bottom'

# Switch between tabs using the mouse wheel.
# Type: Bool
c.tabs.mousewheel_switching = False

# Position of new tabs which aren't opened from another tab.
# Type: NewTabPosition
# Valid values:
#   - prev: Before the current tab.
#   - next: After the current tab.
#   - first: At the beginning.
#   - last: At the end.
c.tabs.new_position.unrelated = 'next'

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'top'

# Wrap when changing tabs.
# Type: Bool
c.tabs.wrap = True

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = '~/.config/startpage/startpage.html'

# Search engines which can be used via the address bar. Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` signs. The search engine named
# `DEFAULT` is used when `url.auto_search` is turned on and something
# else than a URL was entered to be opened. Other search engines can be
# used by prepending the search engine name to the search term, e.g.
# `:open google qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'gh': 'https://github.com/search?q={}', 'yt': 'https://youtube.com/results?search_query={}', 'aw': 'https://wiki.archlinux.org/index.php/{}', 'tpb': 'https://thepiratebay.org/index.php?q=b{}', '4': 'https://boards.4chan.org/{}/', 'tr': 'https://translate.google.com/#en/sr/{}', 'sh': 'https://sci-hub.tw/{}', 'r': 'https://www.reddit.com/r/{}', 'wa': 'https://www.wolframalpha.com/input/?i={}', 'w': 'http://wttr.in/{}', 'tw': 'https://www.thinkwiki.org/wiki/{}'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = ['file:///home/mladen/.config/startpage/startpage.html']

# Default zoom level.
# Type: Perc
c.zoom.default = '90%'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = 'rgb(211, 220, 40)'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = 'black'

# Font color for the matched part of hints.
# Type: QssColor
c.colors.hints.match.fg = 'green'

# Text color for the keyhint widget.
# Type: QssColor
c.colors.keyhint.fg = '#FFFFFF'

# Highlight color for keys to complete the current keychain.
# Type: QssColor
c.colors.keyhint.suffix.fg = '#FFFF00'

# Background color of the keyhint widget.
# Type: QssColor
c.colors.keyhint.bg = 'rgba(0, 0, 0, 80%)'

# Background color of the tab bar.
# Type: QtColor
c.colors.tabs.bar.bg = 'black'

# Color gradient start for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.start = '#0000aa'

# Color gradient end for the tab indicator.
# Type: QtColor
c.colors.tabs.indicator.stop = '#00aa00'

# Color for the tab indicator on errors.
# Type: QtColor
c.colors.tabs.indicator.error = '#ff0000'

# Color gradient interpolation system for the tab indicator.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.tabs.indicator.system = 'rgb'

# Foreground color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.fg = 'white'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#373737'

# Foreground color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.fg = 'white'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#595959'

# Foreground color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.fg = 'white'

# Background color of selected odd tabs.
# Type: QtColor
c.colors.tabs.selected.odd.bg = 'black'

# Foreground color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.fg = 'white'

# Background color of selected even tabs.
# Type: QtColor
c.colors.tabs.selected.even.bg = 'black'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = 'black'

# Bindings for normal mode
config.bind("'", 'enter-mode jump_mark')
config.bind('+', 'zoom-in')
config.bind(',', 'hint inputs')
config.bind('-', 'zoom-out')
config.bind('.', 'repeat-command')
config.bind('/', 'set-cmd-text /')
config.bind('0', 'tab-focus -1')
config.bind('1', 'tab-focus 1')
config.bind('2', 'tab-focus 2')
config.bind('3', 'tab-focus 3')
config.bind('4', 'tab-focus 4')
config.bind('5', 'tab-focus 5')
config.bind('6', 'tab-focus 6')
config.bind('7', 'tab-focus 7')
config.bind('8', 'tab-focus 8')
config.bind('9', 'tab-focus 9')
config.bind(':', 'set-cmd-text :')
config.bind(';I', 'hint images tab')
config.bind(';R', 'hint --rapid links window')
config.bind(';Y', 'hint links yank-primary')
config.bind(';d', 'hint links download')
config.bind(';f', 'hint all tab-fg')
config.bind(';h', 'hint all hover')
config.bind(';i', 'hint images')
config.bind(';t', 'hint inputs')
config.bind(';y', 'hint links yank')
config.bind('<Alt+1>', None)
config.bind('<Alt+2>', None)
config.bind('<Alt+3>', 'tab-focus 3')
config.bind('<Alt+4>', 'tab-focus 4')
config.bind('<Alt+5>', 'tab-focus 5')
config.bind('<Alt+6>', 'tab-focus 6')
config.bind('<Alt+7>', 'tab-focus 7')
config.bind('<Alt+8>', 'tab-focus 8')
config.bind('<Alt+9>', 'tab-focus -1')
config.bind('<Back>', 'back')
config.bind('<Ctrl+F5>', 'reload -f')
config.bind('<Ctrl+Return>', 'follow-selected -t')
config.bind('<Ctrl+Shift+n>', 'open -p')
config.bind('<Ctrl+Tab>', 'tab-focus last')
config.bind('<Ctrl+n>', 'open -w')
config.bind('<Ctrl+p>', 'tab-pin')
config.bind('<Ctrl+q>', 'wq')
config.bind('<Ctrl+v>', 'enter-mode passthrough')
config.bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave')
config.bind('<F11>', 'fullscreen')
config.bind('<F5>', 'reload')
config.bind('<Forward>', 'forward')
config.bind('<Return>', 'follow-selected')
config.bind('=', 'zoom')
config.bind('>', 'hint inputs')
config.bind('?', 'help')
config.bind('@', 'run-macro')
config.bind('D', 'tab-close')
config.bind('F', 'hint all tab')
config.bind('H', 'back')
config.bind('I', 'hint inputs ;; a')
config.bind('J', 'tab-prev')
config.bind('K', 'tab-next')
config.bind('L', 'forward')
config.bind('N', 'search-prev')
config.bind('O', 'set-cmd-text -s :open -t')
config.bind('T', 'tab-move -1 ;; open -t')
config.bind('YB', 'open -t https://www.youtube.com/')
config.bind('Yb', 'open -t https://www.youtube.com/')
config.bind('`', 'enter-mode set_mark')
config.bind('ad', 'download-cancel')
config.bind('cd', 'download-clear')
config.bind('ci', 'open https://www.integral-calculator.com/')
config.bind('co', 'tab-only')
config.bind('d', None)
config.bind('dr', 'open https://drive.google.com/drive/my-drive')
config.bind('dw', 'download')
config.bind('f', 'hint')
config.bind('gB', 'set-cmd-text -s :bookmark-load -t')
config.bind('gC', 'tab-clone')
config.bind('gd', 'open https://drive.google.com/drive/my-drive')
config.bind('ge', 'open https://mail.google.com/mail/u/0/#inbox')
config.bind('gf', 'view-source')
config.bind('gg', 'scroll-to-perc 0')
config.bind('gi', 'open https://www.instagram.com/?hl=en')
config.bind('gj', 'tab-move -')
config.bind('gk', 'tab-move +')
config.bind('gl', None)
config.bind('gm', 'open https://www.facebook.com/messages/t/')
config.bind('go', 'set-cmd-text :open {url:pretty}')
config.bind('gr', 'open https://www.reddit.com/')
config.bind('gw', 'open https://web.whatsapp.com/')
config.bind('gy', 'open https://www.youtube.com/')
config.bind('h', 'scroll left')
config.bind('i', 'enter-mode insert')
config.bind('j', 'scroll down')
config.bind('k', 'scroll up')
config.bind('l', 'scroll right')
config.bind('m', None)
config.bind('n', 'search-next')
config.bind('o', 'set-cmd-text -s :open')
config.bind('q', 'record-macro')
config.bind('r', 'reload')
config.bind('sf', 'save')
config.bind('t', 'open -t')
config.bind('u', 'undo')
config.bind('v', 'enter-mode caret')
config.bind('wP', 'open -w -- {primary}')
config.bind('wa', 'open https://www.wolframalpha.com/')
config.bind('wf', 'hint all window')
config.bind('wh', 'back -w')
config.bind('wp', 'open -w -- {clipboard}')
config.bind('yD', 'yank domain -s')
config.bind('yP', 'yank pretty-url -s')
config.bind('yT', 'yank title -s')
config.bind('yY', 'yank -s')
config.bind('yb', 'open https://www.youtube.com/')
config.bind('yd', 'yank domain')
config.bind('yp', 'yank pretty-url')
config.bind('yt', 'yank title')
config.bind('yy', 'yank')
config.bind('{{', 'navigate prev -t')
config.bind('}}', 'navigate next -t')

# Bindings for caret mode
config.bind('H', 'scroll down', mode='caret')
config.bind('J', 'scroll left', mode='caret')

# Bindings for register mode
config.bind('<Escape>', 'leave-mode', mode='register')

# Bindings for yesno mode
config.bind('<Alt+Shift+y>', 'prompt-yank --sel', mode='yesno')
config.bind('<Alt+y>', 'prompt-yank', mode='yesno')
config.bind('<Escape>', 'leave-mode', mode='yesno')
config.bind('<Return>', 'prompt-accept', mode='yesno')
config.bind('n', 'prompt-accept no', mode='yesno')
config.bind('y', 'prompt-accept yes', mode='yesno')
